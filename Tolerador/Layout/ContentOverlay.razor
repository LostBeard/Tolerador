@using Tolerador.Services
<div class="extension-content @(HideContent ? "fadeOutEl" : "fadeInEl")">
    <div class="extension-content-shared">
        <UIButton Style="width: 24px; height: 24px; padding: 0;" ImageStyle="width: 24px; height: 24px;" Click="Clicked" Image="favicon.png"></UIButton>
    </div>
    <div class="extension-content-local @(HideContent ? "fadeOut" : "fadeIn")">
        @if (ContentType != null)
        {
            <DynamicComponent @ref=dynamicComponent Type="ContentType" Parameters="ContentParameters" />
        }
    </div>
    <div class="@(HideContent ? "fadeOut" : "fadeIn")">
        <div>
            @VideoExtension.Videos.Count
        </div>
        <div>
            @foreach(var vid in VideoExtension.Videos.Values)
            {
                <div>
                    @{
                        var isPlaying = vid.VideoElement.IsPlaying();
                        var isVisible = vid.VideoElement.CheckVisibility();

                    }
                    <div>
                        <span>@(!isPlaying ? "⏸" : "▶")</span>
                        <span>@($"Volume: {Math.Round(vid.VideoElement.Volume, 2)} {(vid.VideoElement.Muted ? "!" : "")}")</span>
                        <span>@($"Visible: {isVisible}")</span>
                        <span>@(TimeSpan.FromSeconds(Math.Round(vid.VideoElement.CurrentTime)))</span> / <span>@(TimeSpan.FromSeconds(Math.Round(vid.VideoElement.Duration ?? 0)))</span>
                    </div>
                    <div>@($"video.{(string.IsNullOrEmpty(vid.VideoElement.Id) ? "" : $"#{vid.VideoElement.Id}")}.{(string.Join(".", vid.VideoElement.ClassNames))}")</div>
                </div>
            }
        </div>
    </div>
</div>
